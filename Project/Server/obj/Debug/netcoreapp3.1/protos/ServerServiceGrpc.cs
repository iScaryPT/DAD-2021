// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/ServerService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class ServerService
{
  static readonly string __ServiceName = "ServerService";

  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  static readonly grpc::Marshaller<global::ReadRequest> __Marshaller_ReadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ReadRequest.Parser));
  static readonly grpc::Marshaller<global::ReadReply> __Marshaller_ReadReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ReadReply.Parser));
  static readonly grpc::Marshaller<global::WriteRequest> __Marshaller_WriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WriteRequest.Parser));
  static readonly grpc::Marshaller<global::WriteReply> __Marshaller_WriteReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WriteReply.Parser));
  static readonly grpc::Marshaller<global::ListServerRequest> __Marshaller_ListServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ListServerRequest.Parser));
  static readonly grpc::Marshaller<global::ListServerReply> __Marshaller_ListServerReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ListServerReply.Parser));
  static readonly grpc::Marshaller<global::BroadcastMessageRequest> __Marshaller_BroadcastMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BroadcastMessageRequest.Parser));
  static readonly grpc::Marshaller<global::BroadcastMessageReply> __Marshaller_BroadcastMessageReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BroadcastMessageReply.Parser));
  static readonly grpc::Marshaller<global::FreezeRequest> __Marshaller_FreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FreezeRequest.Parser));
  static readonly grpc::Marshaller<global::FreezeReply> __Marshaller_FreezeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FreezeReply.Parser));
  static readonly grpc::Marshaller<global::UnFreezeRequest> __Marshaller_UnFreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UnFreezeRequest.Parser));
  static readonly grpc::Marshaller<global::UnFreezeReply> __Marshaller_UnFreezeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UnFreezeReply.Parser));
  static readonly grpc::Marshaller<global::CrashRequest> __Marshaller_CrashRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrashRequest.Parser));
  static readonly grpc::Marshaller<global::CrashReply> __Marshaller_CrashReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrashReply.Parser));
  static readonly grpc::Marshaller<global::StatusRequest> __Marshaller_StatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StatusRequest.Parser));
  static readonly grpc::Marshaller<global::StatusReply> __Marshaller_StatusReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StatusReply.Parser));

  static readonly grpc::Method<global::ReadRequest, global::ReadReply> __Method_Read = new grpc::Method<global::ReadRequest, global::ReadReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Read",
      __Marshaller_ReadRequest,
      __Marshaller_ReadReply);

  static readonly grpc::Method<global::WriteRequest, global::WriteReply> __Method_Write = new grpc::Method<global::WriteRequest, global::WriteReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Write",
      __Marshaller_WriteRequest,
      __Marshaller_WriteReply);

  static readonly grpc::Method<global::ListServerRequest, global::ListServerReply> __Method_ListServer = new grpc::Method<global::ListServerRequest, global::ListServerReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ListServer",
      __Marshaller_ListServerRequest,
      __Marshaller_ListServerReply);

  static readonly grpc::Method<global::BroadcastMessageRequest, global::BroadcastMessageReply> __Method_BroadcastMsg = new grpc::Method<global::BroadcastMessageRequest, global::BroadcastMessageReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "BroadcastMsg",
      __Marshaller_BroadcastMessageRequest,
      __Marshaller_BroadcastMessageReply);

  static readonly grpc::Method<global::FreezeRequest, global::FreezeReply> __Method_Freeze = new grpc::Method<global::FreezeRequest, global::FreezeReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Freeze",
      __Marshaller_FreezeRequest,
      __Marshaller_FreezeReply);

  static readonly grpc::Method<global::UnFreezeRequest, global::UnFreezeReply> __Method_UnFreeze = new grpc::Method<global::UnFreezeRequest, global::UnFreezeReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UnFreeze",
      __Marshaller_UnFreezeRequest,
      __Marshaller_UnFreezeReply);

  static readonly grpc::Method<global::CrashRequest, global::CrashReply> __Method_Crash = new grpc::Method<global::CrashRequest, global::CrashReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Crash",
      __Marshaller_CrashRequest,
      __Marshaller_CrashReply);

  static readonly grpc::Method<global::StatusRequest, global::StatusReply> __Method_Status = new grpc::Method<global::StatusRequest, global::StatusReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Status",
      __Marshaller_StatusRequest,
      __Marshaller_StatusReply);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ServerServiceReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of ServerService</summary>
  [grpc::BindServiceMethod(typeof(ServerService), "BindService")]
  public abstract partial class ServerServiceBase
  {
    public virtual global::System.Threading.Tasks.Task<global::ReadReply> Read(global::ReadRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::WriteReply> Write(global::WriteRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::ListServerReply> ListServer(global::ListServerRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::BroadcastMessageReply> BroadcastMsg(global::BroadcastMessageRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::FreezeReply> Freeze(global::FreezeRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::UnFreezeReply> UnFreeze(global::UnFreezeRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::CrashReply> Crash(global::CrashRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::StatusReply> Status(global::StatusRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for ServerService</summary>
  public partial class ServerServiceClient : grpc::ClientBase<ServerServiceClient>
  {
    /// <summary>Creates a new client for ServerService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public ServerServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for ServerService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public ServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected ServerServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected ServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::ReadReply Read(global::ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::ReadReply Read(global::ReadRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::ReadReply> ReadAsync(global::ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::ReadReply> ReadAsync(global::ReadRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
    }
    public virtual global::WriteReply Write(global::WriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Write(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::WriteReply Write(global::WriteRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Write, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::WriteReply> WriteAsync(global::WriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return WriteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::WriteReply> WriteAsync(global::WriteRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Write, null, options, request);
    }
    public virtual global::ListServerReply ListServer(global::ListServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ListServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::ListServerReply ListServer(global::ListServerRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ListServer, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::ListServerReply> ListServerAsync(global::ListServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ListServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::ListServerReply> ListServerAsync(global::ListServerRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ListServer, null, options, request);
    }
    public virtual global::BroadcastMessageReply BroadcastMsg(global::BroadcastMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return BroadcastMsg(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::BroadcastMessageReply BroadcastMsg(global::BroadcastMessageRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_BroadcastMsg, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::BroadcastMessageReply> BroadcastMsgAsync(global::BroadcastMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return BroadcastMsgAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::BroadcastMessageReply> BroadcastMsgAsync(global::BroadcastMessageRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_BroadcastMsg, null, options, request);
    }
    public virtual global::FreezeReply Freeze(global::FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Freeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::FreezeReply Freeze(global::FreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Freeze, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::FreezeReply> FreezeAsync(global::FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return FreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::FreezeReply> FreezeAsync(global::FreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Freeze, null, options, request);
    }
    public virtual global::UnFreezeReply UnFreeze(global::UnFreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnFreeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::UnFreezeReply UnFreeze(global::UnFreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UnFreeze, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::UnFreezeReply> UnFreezeAsync(global::UnFreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnFreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::UnFreezeReply> UnFreezeAsync(global::UnFreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UnFreeze, null, options, request);
    }
    public virtual global::CrashReply Crash(global::CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Crash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::CrashReply Crash(global::CrashRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Crash, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::CrashReply> CrashAsync(global::CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CrashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::CrashReply> CrashAsync(global::CrashRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Crash, null, options, request);
    }
    public virtual global::StatusReply Status(global::StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::StatusReply Status(global::StatusRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::StatusReply> StatusAsync(global::StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::StatusReply> StatusAsync(global::StatusRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override ServerServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new ServerServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(ServerServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_Read, serviceImpl.Read)
        .AddMethod(__Method_Write, serviceImpl.Write)
        .AddMethod(__Method_ListServer, serviceImpl.ListServer)
        .AddMethod(__Method_BroadcastMsg, serviceImpl.BroadcastMsg)
        .AddMethod(__Method_Freeze, serviceImpl.Freeze)
        .AddMethod(__Method_UnFreeze, serviceImpl.UnFreeze)
        .AddMethod(__Method_Crash, serviceImpl.Crash)
        .AddMethod(__Method_Status, serviceImpl.Status).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, ServerServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ReadRequest, global::ReadReply>(serviceImpl.Read));
    serviceBinder.AddMethod(__Method_Write, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WriteRequest, global::WriteReply>(serviceImpl.Write));
    serviceBinder.AddMethod(__Method_ListServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ListServerRequest, global::ListServerReply>(serviceImpl.ListServer));
    serviceBinder.AddMethod(__Method_BroadcastMsg, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BroadcastMessageRequest, global::BroadcastMessageReply>(serviceImpl.BroadcastMsg));
    serviceBinder.AddMethod(__Method_Freeze, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FreezeRequest, global::FreezeReply>(serviceImpl.Freeze));
    serviceBinder.AddMethod(__Method_UnFreeze, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UnFreezeRequest, global::UnFreezeReply>(serviceImpl.UnFreeze));
    serviceBinder.AddMethod(__Method_Crash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CrashRequest, global::CrashReply>(serviceImpl.Crash));
    serviceBinder.AddMethod(__Method_Status, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::StatusRequest, global::StatusReply>(serviceImpl.Status));
  }

}
#endregion

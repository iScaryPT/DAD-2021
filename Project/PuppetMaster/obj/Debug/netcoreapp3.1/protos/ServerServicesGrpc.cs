// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/ServerServices.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class ServerService
{
  static readonly string __ServiceName = "ServerService";

  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  static readonly grpc::Marshaller<global::FreezeRequest> __Marshaller_FreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FreezeRequest.Parser));
  static readonly grpc::Marshaller<global::FreezeReply> __Marshaller_FreezeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FreezeReply.Parser));
  static readonly grpc::Marshaller<global::UnFreezeRequest> __Marshaller_UnFreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UnFreezeRequest.Parser));
  static readonly grpc::Marshaller<global::UnFreezeReply> __Marshaller_UnFreezeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UnFreezeReply.Parser));
  static readonly grpc::Marshaller<global::CrashRequest> __Marshaller_CrashRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrashRequest.Parser));
  static readonly grpc::Marshaller<global::CrashReply> __Marshaller_CrashReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrashReply.Parser));
  static readonly grpc::Marshaller<global::StatusRequest> __Marshaller_StatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StatusRequest.Parser));
  static readonly grpc::Marshaller<global::StatusReply> __Marshaller_StatusReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StatusReply.Parser));

  static readonly grpc::Method<global::FreezeRequest, global::FreezeReply> __Method_Freeze = new grpc::Method<global::FreezeRequest, global::FreezeReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Freeze",
      __Marshaller_FreezeRequest,
      __Marshaller_FreezeReply);

  static readonly grpc::Method<global::UnFreezeRequest, global::UnFreezeReply> __Method_UnFreeze = new grpc::Method<global::UnFreezeRequest, global::UnFreezeReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UnFreeze",
      __Marshaller_UnFreezeRequest,
      __Marshaller_UnFreezeReply);

  static readonly grpc::Method<global::CrashRequest, global::CrashReply> __Method_Crash = new grpc::Method<global::CrashRequest, global::CrashReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Crash",
      __Marshaller_CrashRequest,
      __Marshaller_CrashReply);

  static readonly grpc::Method<global::StatusRequest, global::StatusReply> __Method_Status = new grpc::Method<global::StatusRequest, global::StatusReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Status",
      __Marshaller_StatusRequest,
      __Marshaller_StatusReply);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ServerServicesReflection.Descriptor.Services[0]; }
  }

  /// <summary>Client for ServerService</summary>
  public partial class ServerServiceClient : grpc::ClientBase<ServerServiceClient>
  {
    /// <summary>Creates a new client for ServerService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public ServerServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for ServerService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public ServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected ServerServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected ServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::FreezeReply Freeze(global::FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Freeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::FreezeReply Freeze(global::FreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Freeze, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::FreezeReply> FreezeAsync(global::FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return FreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::FreezeReply> FreezeAsync(global::FreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Freeze, null, options, request);
    }
    public virtual global::UnFreezeReply UnFreeze(global::UnFreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnFreeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::UnFreezeReply UnFreeze(global::UnFreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UnFreeze, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::UnFreezeReply> UnFreezeAsync(global::UnFreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnFreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::UnFreezeReply> UnFreezeAsync(global::UnFreezeRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UnFreeze, null, options, request);
    }
    public virtual global::CrashReply Crash(global::CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Crash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::CrashReply Crash(global::CrashRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Crash, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::CrashReply> CrashAsync(global::CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CrashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::CrashReply> CrashAsync(global::CrashRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Crash, null, options, request);
    }
    public virtual global::StatusReply Status(global::StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::StatusReply Status(global::StatusRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::StatusReply> StatusAsync(global::StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::StatusReply> StatusAsync(global::StatusRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override ServerServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new ServerServiceClient(configuration);
    }
  }

}
#endregion
